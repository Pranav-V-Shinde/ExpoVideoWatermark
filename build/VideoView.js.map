{"version":3,"file":"VideoView.js","sourceRoot":"","sources":["../src/VideoView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAa,aAAa,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAE5D,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,eAAe,EAAE,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAI5E;;;;;;;;;GASG;AACH,MAAM,UAAU,2BAA2B;IACzC,OAAO,iBAAiB,CAAC,2BAA2B,EAAE,CAAC;AACzD,CAAC;AAED,MAAM,OAAO,SAAU,SAAQ,aAA6B;IAC1D,SAAS,GAAG,SAAS,EAAO,CAAC;IAE7B;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE,CAAC;IACxD,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,qBAAqB;QACzB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,qBAAqB,EAAE,CAAC;IAC/D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oBAAoB;QACxB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,oBAAoB,EAAE,CAAC;IAC9D,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxC,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAErC,IAAI,sBAAsB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,aAAa,EAAE,CAAC;YACvE,OAAO,CAAC,sBAAsB,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAG,CAAC;QACtF,CAAC;QACD,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAG,CAAC;IAC/E,CAAC;CACF;AAED,gFAAgF;AAChF,gEAAgE;AAChE,yEAAyE;AACzE,SAAS,WAAW,CAAC,MAA4B;IAC/C,IAAI,MAAM,YAAY,iBAAiB,CAAC,WAAW,EAAE,CAAC;QACpD,mBAAmB;QACnB,OAAO,MAAM,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { ReactNode, PureComponent, createRef } from 'react';\r\n\r\nimport NativeVideoModule from './NativeVideoModule';\r\nimport NativeVideoView, { NativeTextureVideoView } from './NativeVideoView';\r\nimport type { VideoPlayer } from './VideoPlayer.types';\r\nimport type { VideoViewProps } from './VideoView.types';\r\n\r\n/**\r\n * Returns whether the current device supports Picture in Picture (PiP) mode.\r\n *\r\n * > **Note:** All major web browsers support Picture in Picture (PiP) mode except Firefox.\r\n * > For more information, see [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API#browser_compatibility).\r\n * @returns A `boolean` which is `true` if the device supports PiP mode, and `false` otherwise.\r\n * @platform android\r\n * @platform ios\r\n * @platform web\r\n */\r\nexport function isPictureInPictureSupported(): boolean {\r\n  return NativeVideoModule.isPictureInPictureSupported();\r\n}\r\n\r\nexport class VideoView extends PureComponent<VideoViewProps> {\r\n  nativeRef = createRef<any>();\r\n\r\n  /**\r\n   * Enters fullscreen mode.\r\n   */\r\n  async enterFullscreen(): Promise<void> {\r\n    return await this.nativeRef.current?.enterFullscreen();\r\n  }\r\n\r\n  /**\r\n   * Exits fullscreen mode.\r\n   */\r\n  async exitFullscreen(): Promise<void> {\r\n    return await this.nativeRef.current?.exitFullscreen();\r\n  }\r\n\r\n  /**\r\n   * Enters Picture in Picture (PiP) mode. Throws an exception if the device does not support PiP.\r\n   * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\r\n   *\r\n   * > **Note:** The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config)\r\n   * > has to be configured for the PiP to work.\r\n   * @platform android\r\n   * @platform ios\r\n   * @platform web\r\n   */\r\n  async startPictureInPicture(): Promise<void> {\r\n    return await this.nativeRef.current?.startPictureInPicture();\r\n  }\r\n\r\n  /**\r\n   * Exits Picture in Picture (PiP) mode.\r\n   * @platform android\r\n   * @platform ios\r\n   * @platform web\r\n   */\r\n  async stopPictureInPicture(): Promise<void> {\r\n    return await this.nativeRef.current?.stopPictureInPicture();\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const { player, ...props } = this.props;\r\n    const playerId = getPlayerId(player);\r\n\r\n    if (NativeTextureVideoView && this.props.surfaceType === 'textureView') {\r\n      return <NativeTextureVideoView {...props} player={playerId} ref={this.nativeRef} />;\r\n    }\r\n    return <NativeVideoView {...props} player={playerId} ref={this.nativeRef} />;\r\n  }\r\n}\r\n\r\n// Temporary solution to pass the shared object ID instead of the player object.\r\n// We can't really pass it as an object in the old architecture.\r\n// Technically we can in the new architecture, but it's not possible yet.\r\nfunction getPlayerId(player: number | VideoPlayer): number | null {\r\n  if (player instanceof NativeVideoModule.VideoPlayer) {\r\n    // @ts-expect-error\r\n    return player.__expo_shared_object_id__;\r\n  }\r\n  if (typeof player === 'number') {\r\n    return player;\r\n  }\r\n  return null;\r\n}\r\n"]}