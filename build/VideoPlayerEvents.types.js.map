{"version":3,"file":"VideoPlayerEvents.types.js","sourceRoot":"","sources":["../src/VideoPlayerEvents.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\r\n  PlayerError,\r\n  SubtitleTrack,\r\n  VideoPlayerStatus,\r\n  VideoSource,\r\n  VideoTrack,\r\n  AudioTrack,\r\n} from './VideoPlayer.types';\r\n\r\n/**\r\n * Handlers for events which can be emitted by the player.\r\n */\r\nexport type VideoPlayerEvents = {\r\n  /**\r\n   * Handler for an event emitted when the status of the player changes.\r\n   */\r\n  statusChange(payload: StatusChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the player starts or stops playback.\r\n   */\r\n  playingChange(payload: PlayingChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the `playbackRate` property of the player changes.\r\n   */\r\n  playbackRateChange(payload: PlaybackRateChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the `volume` of `muted` property of the player changes.\r\n   */\r\n  volumeChange(payload: VolumeChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the `muted` property of the player changes\r\n   */\r\n  mutedChange(payload: MutedChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the player plays to the end of the current source.\r\n   */\r\n  playToEnd(): void;\r\n\r\n  /**\r\n   * Handler for an event emitted in a given interval specified by the `timeUpdateEventInterval`.\r\n   */\r\n  timeUpdate(payload: TimeUpdateEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the current media source of the player changes.\r\n   */\r\n  sourceChange(payload: SourceChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the available subtitle tracks change.\r\n   */\r\n  availableSubtitleTracksChange(payload: AvailableSubtitleTracksChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the current subtitle track changes.\r\n   */\r\n  subtitleTrackChange(payload: SubtitleTrackChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the available audio tracks change.\r\n   */\r\n  availableAudioTracksChange(payload: AvailableAudioTracksChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the current audio track changes.\r\n   */\r\n  audioTrackChange(payload: AudioTrackChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the current video track changes.\r\n   */\r\n  videoTrackChange(payload: VideoTrackChangeEventPayload): void;\r\n\r\n  /**\r\n   * Handler for an event emitted when the player has finished loading metadata for the current video source.\r\n   * This event is emitted when the player has finished metadata for a [`VideoSource`](#videosource), but it doesn't mean that there is enough data buffered to start the playback.\r\n   */\r\n  sourceLoad(payload: SourceLoadEventPayload): void;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`statusChange`](#videoplayerevents) event.\r\n */\r\nexport type StatusChangeEventPayload = {\r\n  /**\r\n   * New status of the player.\r\n   */\r\n  status: VideoPlayerStatus;\r\n\r\n  /**\r\n   * Previous status of the player.\r\n   */\r\n  oldStatus?: VideoPlayerStatus;\r\n\r\n  /**\r\n   * Error object containing information about the error that occurred.\r\n   */\r\n  error?: PlayerError;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`playingChange`](#videoplayerevents) event.\r\n */\r\nexport type PlayingChangeEventPayload = {\r\n  /**\r\n   * Boolean value whether the player is currently playing.\r\n   */\r\n  isPlaying: boolean;\r\n\r\n  /**\r\n   * Previous value of the `isPlaying` property.\r\n   */\r\n  oldIsPlaying?: boolean;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`playbackRateChange`](#videoplayerevents) event.\r\n */\r\nexport type PlaybackRateChangeEventPayload = {\r\n  /**\r\n   * Float value indicating the current playback speed of the player.\r\n   */\r\n  playbackRate: number;\r\n\r\n  /**\r\n   * Previous value of the `playbackRate` property.\r\n   */\r\n  oldPlaybackRate?: number;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`volumeChange`](#videoplayerevents) event.\r\n */\r\nexport type VolumeChangeEventPayload = {\r\n  /**\r\n   * Float value indicating the current volume of the player.\r\n   */\r\n  volume: number;\r\n\r\n  /**\r\n   * Previous value of the `volume` property.\r\n   */\r\n  oldVolume?: number;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`mutedChange`](#videoplayerevents) event.\r\n */\r\nexport type MutedChangeEventPayload = {\r\n  /**\r\n   * Boolean value whether the player is currently muted.\r\n   */\r\n  muted: boolean;\r\n\r\n  /**\r\n   * Previous value of the `isMuted` property.\r\n   */\r\n  oldMuted?: boolean;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`sourceChange`](#videoplayerevents) event.\r\n */\r\nexport type SourceChangeEventPayload = {\r\n  /**\r\n   * New source of the player.\r\n   */\r\n  source: VideoSource;\r\n\r\n  /**\r\n   * Previous source of the player.\r\n   */\r\n  oldSource?: VideoSource;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`timeUpdate`](#videoplayerevents) event, contains information about the current playback progress.\r\n */\r\nexport type TimeUpdateEventPayload = {\r\n  /**\r\n   * Float value indicating the current playback time in seconds. Same as the [`currentTime`](#currenttime) property.\r\n   */\r\n  currentTime: number;\r\n\r\n  /**\r\n   * The exact timestamp when the currently displayed video frame was sent from the server,\r\n   * based on the `EXT-X-PROGRAM-DATE-TIME` tag in the livestream metadata.\r\n   * Same as the [`currentLiveTimestamp`](#currentlivetimestamp) property.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  currentLiveTimestamp: number | null;\r\n\r\n  /**\r\n   * Float value indicating the latency of the live stream in seconds.\r\n   * Same as the [`currentOffsetFromLive`](#currentoffsetfromlive) property.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  currentOffsetFromLive: number | null;\r\n\r\n  /**\r\n   * Float value indicating how far the player has buffered the video in seconds.\r\n   * Same as the [`bufferedPosition`](#bufferedPosition) property.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  bufferedPosition: number;\r\n};\r\n\r\nexport type SubtitleTrackChangeEventPayload = {\r\n  /**\r\n   * New subtitle track of the player.\r\n   */\r\n  subtitleTrack: SubtitleTrack | null;\r\n\r\n  /**\r\n   * Previous subtitle track of the player.\r\n   */\r\n  oldSubtitleTrack?: SubtitleTrack | null;\r\n};\r\n\r\n/**\r\n * Data delivered with the [`videoTrackChange`](#videoplayerevents) event, contains information about the video track which is currently being played.\r\n */\r\nexport type VideoTrackChangeEventPayload = {\r\n  /**\r\n   * New video track of the player.\r\n   */\r\n  videoTrack: VideoTrack | null;\r\n\r\n  /**\r\n   * Previous video track of the player.\r\n   */\r\n  oldVideoTrack?: VideoTrack | null;\r\n};\r\n\r\n/**\r\n * TODO @behenate: For SDK53 mark as deprecated in favor of SourceLoadEventPayload\r\n * @hidden\r\n */\r\nexport type AvailableSubtitleTracksChangeEventPayload = {\r\n  /**\r\n   * Array of available subtitle tracks.\r\n   */\r\n  availableSubtitleTracks: SubtitleTrack[];\r\n\r\n  /**\r\n   * Previous array of available subtitle tracks.\r\n   */\r\n  oldAvailableSubtitleTracks?: SubtitleTrack[];\r\n};\r\n\r\n/**\r\n * Data delivered with the [`sourceLoad`](#videoplayerevents) event, contains information about the video source that has finished loading.\r\n */\r\nexport type SourceLoadEventPayload = {\r\n  /**\r\n   * The video source that has been loaded.\r\n   */\r\n  videoSource: VideoSource | null;\r\n\r\n  /**\r\n   * Duration of the video source in seconds.\r\n   */\r\n  duration: number;\r\n\r\n  /**\r\n   * Video tracks available for the loaded video source.\r\n   *\r\n   * > On iOS, when using a HLS source, make sure that the uri contains `.m3u8` extension or that the [`contentType`](#contenttype) property of the [`VideoSource`](#videosource) has been set to `'hls'`. Otherwise, the video tracks will not be available.\r\n   */\r\n  availableVideoTracks: VideoTrack[];\r\n\r\n  /**\r\n   * Subtitle tracks available for the loaded video source.\r\n   */\r\n  availableSubtitleTracks: SubtitleTrack[];\r\n\r\n  /**\r\n   * Audio tracks available for the loaded video source.\r\n   */\r\n  availableAudioTracks: AudioTrack[];\r\n};\r\n\r\ntype AudioTrackChangeEventPayload = {\r\n  /**\r\n   * New audio track of the player.\r\n   */\r\n  audioTrack: AudioTrack | null;\r\n\r\n  /**\r\n   * Previous audio track of the player.\r\n   */\r\n  oldAudioTrack?: AudioTrack | null;\r\n};\r\n\r\ntype AvailableAudioTracksChangeEventPayload = {\r\n  /**\r\n   * Array of available audio tracks.\r\n   */\r\n  availableAudioTracks: AudioTrack[];\r\n\r\n  /**\r\n   * Previous array of available audio tracks.\r\n   */\r\n  oldAvailableAudioTracks?: AudioTrack[];\r\n};\r\n"]}