{"version":3,"file":"VideoPlayer.types.js","sourceRoot":"","sources":["../src/VideoPlayer.types.ts"],"names":[],"mappings":"","sourcesContent":["import { SharedObject } from 'expo';\r\n\r\nimport { VideoPlayerEvents } from './VideoPlayerEvents.types';\r\nimport { VideoThumbnail } from './VideoThumbnail';\r\n\r\n/**\r\n * A class that represents an instance of the video player.\r\n */\r\nexport declare class VideoPlayer extends SharedObject<VideoPlayerEvents> {\r\n  /**\r\n   * Boolean value whether the player is currently playing.\r\n   * > Use `play` and `pause` methods to control the playback.\r\n   */\r\n  readonly playing: boolean;\r\n\r\n  /**\r\n   * Determines whether the player should automatically replay after reaching the end of the video.\r\n   * @default false\r\n   */\r\n  loop: boolean;\r\n\r\n  /**\r\n   * Determines whether the player should allow external playback.\r\n   * @default true\r\n   * @platform ios\r\n   */\r\n  allowsExternalPlayback: boolean;\r\n\r\n  /**\r\n   * Determines how the player will interact with other audio playing in the system.\r\n   *\r\n   * @default 'auto'\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  audioMixingMode: AudioMixingMode;\r\n\r\n  /**\r\n   * Boolean value whether the player is currently muted.\r\n   * Setting this property to `true`/`false` will mute/unmute the player.\r\n   * @default false\r\n   */\r\n  muted: boolean;\r\n\r\n  /**\r\n   * Float value indicating the current playback time in seconds.\r\n   *\r\n   * If the player is not yet playing, this value indicates the time position\r\n   * at which playback will begin once the `play()` method is called.\r\n   *\r\n   * Setting `currentTime` to a new value seeks the player to the given time.\r\n   * Note that frame accurate seeking may incur additional decoding delay which can impact seeking performance.\r\n   * Consider using the [`seekBy`](#seekbyseconds) function if the time does not have to be set precisely.\r\n   */\r\n  currentTime: number;\r\n\r\n  /**\r\n   * The exact timestamp when the currently displayed video frame was sent from the server,\r\n   * based on the `EXT-X-PROGRAM-DATE-TIME` tag in the livestream metadata.\r\n   * If this metadata is missing, this property will return `null`.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly currentLiveTimestamp: number | null;\r\n\r\n  /**\r\n   * Float value indicating the latency of the live stream in seconds.\r\n   * If a livestream doesn't have the required metadata, this will return `null`.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly currentOffsetFromLive: number | null;\r\n\r\n  /**\r\n   * Float value indicating the time offset from the live in seconds.\r\n   * @platform ios\r\n   */\r\n  targetOffsetFromLive: number;\r\n\r\n  /**\r\n   * Float value indicating the duration of the current video in seconds.\r\n   */\r\n  readonly duration: number;\r\n\r\n  /**\r\n   * Float value between `0` and `1.0` representing the current volume.\r\n   * Muting the player doesn't affect the volume. In other words, when the player is muted, the volume is the same as\r\n   * when unmuted. Similarly, setting the volume doesn't unmute the player.\r\n   * @default 1.0\r\n   */\r\n  volume: number;\r\n\r\n  /**\r\n   * Boolean value indicating if the player should correct audio pitch when the playback speed changes.\r\n   * @default true\r\n   */\r\n  preservesPitch: boolean;\r\n\r\n  /**\r\n   * Float value indicating the interval in seconds at which the player will emit the [`timeUpdate`](#videoplayerevents) event.\r\n   * When the value is equal to `0`, the event will not be emitted.\r\n   *\r\n   * @default 0\r\n   */\r\n  timeUpdateEventInterval: number;\r\n\r\n  /**\r\n   * Float value between `0` and `16.0` indicating the current playback speed of the player.\r\n   * @default 1.0\r\n   */\r\n  playbackRate: number;\r\n\r\n  /**\r\n   * Boolean value indicating whether the player is currently playing a live stream.\r\n   */\r\n  readonly isLive: boolean;\r\n\r\n  /**\r\n   * Indicates the current status of the player.\r\n   */\r\n  readonly status: VideoPlayerStatus;\r\n\r\n  /**\r\n   * Boolean value determining whether the player should show the now playing notification.\r\n   *\r\n   * @default false\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  showNowPlayingNotification: boolean;\r\n\r\n  /**\r\n   * Determines whether the player should continue playing after the app enters the background.\r\n   * @default false\r\n   * @platform ios\r\n   * @platform android\r\n   */\r\n  staysActiveInBackground: boolean;\r\n\r\n  /**\r\n   * Float value indicating how far the player has buffered the video in seconds.\r\n   *\r\n   * This value is 0 when the player has not buffered up to the current playback time.\r\n   * When it's impossible to determine the buffer state (for example, when the player isn't playing any media), this value is -1.\r\n   */\r\n  readonly bufferedPosition: number;\r\n\r\n  /**\r\n   * Specifies buffer options which will be used by the player when buffering the video.\r\n   *\r\n   * > You should provide a `BufferOptions` object when setting this property. Setting individual buffer properties is not supported.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  bufferOptions: BufferOptions;\r\n\r\n  /**\r\n   * Specifies the subtitle track which is currently displayed by the player. `null` when no subtitles are displayed.\r\n   *\r\n   * > To ensure a valid subtitle track, always assign one of the subtitle tracks from the [`availableSubtitleTracks`](#availablesubtitletracks) array.\r\n   *\r\n   * @default null\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  subtitleTrack: SubtitleTrack | null;\r\n\r\n  /**\r\n   * Specifies the audio track currently played by the player. `null` when no audio is played.\r\n   *\r\n   * @default null\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  audioTrack: AudioTrack | null;\r\n\r\n  /**\r\n   * An array of audio tracks available for the current video.\r\n   *\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly availableAudioTracks: AudioTrack[];\r\n\r\n  /**\r\n   * An array of subtitle tracks available for the current video.\r\n   *\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly availableSubtitleTracks: SubtitleTrack[];\r\n\r\n  /**\r\n   * Specifies the video track currently played by the player. `null` when no video is displayed.\r\n   *\r\n   * @default null\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly videoTrack: VideoTrack | null;\r\n\r\n  /**\r\n   * An array of video tracks available for the current video.\r\n   *\r\n   * > On iOS, when using a HLS source, make sure that the uri contains `.m3u8` extension or that the [`contentType`](#contenttype) property of the [`VideoSource`](#videosource) has been set to `'hls'`. Otherwise, the video tracks will not be available.\r\n   *\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly availableVideoTracks: VideoTrack[];\r\n\r\n  /**\r\n   * Initializes a new video player instance with the given source.\r\n   *\r\n   * @param source The source of the video to be played.\r\n   * @param useSynchronousReplace Optional parameter, when `true` `source` from the first parameter will be loaded on the main thread.\r\n   * @hidden\r\n   */\r\n  constructor(source: VideoSource, useSynchronousReplace?: boolean);\r\n\r\n  /**\r\n   * Resumes the player.\r\n   */\r\n  play(): void;\r\n\r\n  /**\r\n   * Pauses the player.\r\n   */\r\n  pause(): void;\r\n\r\n  /**\r\n   * Replaces the current source with a new one.\r\n   *\r\n   * > On iOS, this method loads the asset data synchronously on the UI thread and can block it for extended periods of time.\r\n   * > Use `replaceAsync` to load the asset asynchronously and avoid UI lags.\r\n   *\r\n   * > This method will be deprecated in the future.\r\n   */\r\n  replace(source: VideoSource, disableWarning?: boolean): void;\r\n\r\n  /**\r\n   * Replaces the current source with a new one, while offloading loading of the asset to a different thread.\r\n   *\r\n   * > On Android and Web, this method is equivalent to `replace`.\r\n   */\r\n  replaceAsync(source: VideoSource): Promise<void>;\r\n\r\n  /**\r\n   * Seeks the playback by the given number of seconds. The time to which the player seeks may differ from the specified requested time for efficiency,\r\n   * depending on the encoding and what is currently buffered by the player. Use this function to implement playback controls that seek by specific amount of time,\r\n   * in which case, the actual time usually does not have to be precise. For frame accurate seeking, use the [`currentTime`](#currenttime) property.\r\n   */\r\n  seekBy(seconds: number): void;\r\n\r\n  /**\r\n   * Seeks the playback to the beginning.\r\n   */\r\n  replay(): void;\r\n\r\n  /**\r\n   * Generates thumbnails from the currently played asset. The thumbnails are references to native images,\r\n   * thus they can be used as a source of the `Image` component from `expo-image`.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  generateThumbnailsAsync(\r\n    times: number | number[],\r\n    options?: VideoThumbnailOptions\r\n  ): Promise<VideoThumbnail[]>;\r\n}\r\n\r\n/**\r\n * Additional options for video thumbnails generation.\r\n */\r\nexport type VideoThumbnailOptions = {\r\n  /**\r\n   * If provided, the generated thumbnail will not exceed this width in pixels, preserving its aspect ratio.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  maxWidth?: number;\r\n\r\n  /**\r\n   * If provided, the generated thumbnail will not exceed this height in pixels, preserving its aspect ratio.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  maxHeight?: number;\r\n};\r\n\r\n/**\r\n * Describes the current status of the player.\r\n * - `idle`: The player is not playing or loading any videos.\r\n * - `loading`: The player is loading video data from the provided source\r\n * - `readyToPlay`: The player has loaded enough data to start playing or to continue playback.\r\n * - `error`: The player has encountered an error while loading or playing the video.\r\n */\r\nexport type VideoPlayerStatus = 'idle' | 'loading' | 'readyToPlay' | 'error';\r\n\r\nexport type VideoSource =\r\n  | string\r\n  | number\r\n  | null\r\n  | {\r\n      /**\r\n       * The URI of the video.\r\n       *\r\n       * This property is exclusive with the `assetId` property. When both are present, the `assetId` will be ignored.\r\n       */\r\n      uri?: string;\r\n\r\n      /**\r\n       * The asset ID of a local video asset, acquired with the `require` function.\r\n       * This property is exclusive with the `uri` property. When both are present, the `assetId` will be ignored.\r\n       */\r\n      assetId?: number;\r\n\r\n      /**\r\n       * Specifies the DRM options which will be used by the player while loading the video.\r\n       */\r\n      drm?: DRMOptions;\r\n\r\n      /**\r\n       * Specifies information which will be displayed in the now playing notification.\r\n       * When undefined the player will display information contained in the video metadata.\r\n       * @platform android\r\n       * @platform ios\r\n       */\r\n      metadata?: VideoMetadata;\r\n\r\n      /**\r\n       * Specifies headers sent with the video request.\r\n       * > For DRM license headers use the `headers` field of [`DRMOptions`](#drmoptions).\r\n       * @platform android\r\n       * @platform ios\r\n       */\r\n      headers?: Record<string, string>;\r\n\r\n      /**\r\n       * Specifies whether the player should use caching for the video.\r\n       * > Due to platform limitations, the cache cannot be used with HLS video sources on iOS. Caching DRM-protected videos is not supported on Android and iOS.\r\n       * @default false\r\n       * @platform android\r\n       * @platform ios\r\n       */\r\n      useCaching?: boolean;\r\n\r\n      /**\r\n       * Specifies the content type of the video source. When set to `'auto'`, the player will try to automatically determine the content type.\r\n       *\r\n       * You should use this property when playing HLS, SmoothStreaming or DASH videos from an uri, which does not contain a standardized extension for the corresponding media type.\r\n       * @default 'auto'\r\n       * @platform android\r\n       * @platform ios\r\n       */\r\n      contentType?: ContentType;\r\n    };\r\n\r\n/**\r\n * Contains information about any errors that the player encountered during the playback\r\n */\r\nexport type PlayerError = {\r\n  message: string;\r\n};\r\n\r\n/**\r\n * Contains information that will be displayed in the now playing notification when the video is playing.\r\n * @platform android\r\n * @platform ios\r\n */\r\nexport type VideoMetadata = {\r\n  /**\r\n   * The title of the video.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Secondary text that will be displayed under the title.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  artist?: string;\r\n  /**\r\n   * The uri of the video artwork.\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  artwork?: string;\r\n};\r\n\r\n/**\r\n * Specifies which type of DRM to use:\r\n * - Android supports ClearKey, PlayReady and Widevine.\r\n * - iOS supports FairPlay.\r\n */\r\nexport type DRMType = 'clearkey' | 'fairplay' | 'playready' | 'widevine';\r\n\r\n/**\r\n * Specifies DRM options which will be used by the player while loading the video.\r\n */\r\nexport type DRMOptions = {\r\n  /**\r\n   * Determines which type of DRM to use.\r\n   */\r\n  type: DRMType;\r\n\r\n  /**\r\n   * Determines the license server URL.\r\n   */\r\n  licenseServer: string;\r\n\r\n  /**\r\n   * Determines headers sent to the license server on license requests.\r\n   */\r\n  headers?: Record<string, string>;\r\n\r\n  /**\r\n   * Specifies whether the DRM is a multi-key DRM.\r\n   * @platform android\r\n   */\r\n  multiKey?: boolean;\r\n\r\n  /**\r\n   * Specifies the content ID of the stream.\r\n   * @platform ios\r\n   */\r\n  contentId?: string;\r\n\r\n  /**\r\n   * Specifies the certificate URL for the FairPlay DRM.\r\n   * @platform ios\r\n   */\r\n  certificateUrl?: string;\r\n\r\n  /**\r\n   * Specifies the base64 encoded certificate data for the FairPlay DRM.\r\n   * When this property is set, the `certificateUrl` property is ignored.\r\n   * @platform ios\r\n   */\r\n  base64CertificateData?: string;\r\n};\r\n\r\n/**\r\n * Specifies buffer options which will be used by the player when buffering the video.\r\n *\r\n * @platform android\r\n * @platform ios\r\n */\r\nexport type BufferOptions = {\r\n  /**\r\n   * The duration in seconds which determines how much media the player should buffer ahead of the current playback time.\r\n   *\r\n   * On iOS when set to `0` the player will automatically decide appropriate buffer duration.\r\n   *\r\n   * Equivalent to [`AVPlayerItem.preferredForwardBufferDuration`](https://developer.apple.com/documentation/avfoundation/avplayeritem/1643630-preferredforwardbufferduration).\r\n   * @default Android: 20, iOS: 0\r\n   * @platform android\r\n   * @platform ios\r\n   */\r\n  readonly preferredForwardBufferDuration?: number;\r\n\r\n  /**\r\n   * A Boolean value that indicates whether the player should automatically delay playback in order to minimize stalling.\r\n   *\r\n   * Equivalent to [`AVPlayer.automaticallyWaitsToMinimizeStalling`](https://developer.apple.com/documentation/avfoundation/avplayer/1643482-automaticallywaitstominimizestal).\r\n   * @default true\r\n   * @platform ios\r\n   */\r\n  readonly waitsToMinimizeStalling?: boolean;\r\n\r\n  /**\r\n   * Minimum duration of the buffer in seconds required to continue playing after the player has been paused or started buffering.\r\n   *\r\n   * > This property will be ignored if `preferredForwardBufferDuration` is lower.\r\n   * @default 2\r\n   * @platform android\r\n   */\r\n  readonly minBufferForPlayback?: number;\r\n\r\n  /**\r\n   * The maximum number of bytes that the player can buffer from the network.\r\n   * When 0 the player will automatically decide appropriate buffer size.\r\n   *\r\n   * @default 0\r\n   * @platform android\r\n   */\r\n  readonly maxBufferBytes?: number | null;\r\n\r\n  /**\r\n   * A Boolean value which determines whether the player should prioritize time over size when buffering media.\r\n   *\r\n   * @default false\r\n   * @platform android\r\n   */\r\n  readonly prioritizeTimeOverSizeThreshold?: boolean;\r\n};\r\n\r\n/**\r\n * Specifies the content type of the source.\r\n *\r\n * - `auto`: The player will automatically determine the content type of the video.\r\n * - `progressive`: The player will use progressive download content type. This is the default `ContentType` when the uri does not contain an extension.\r\n * - `hls`: The player will use HLS content type.\r\n * - `dash`: The player will use DASH content type (Android-only).\r\n * - `smoothStreaming`: The player will use SmoothStreaming content type (Android-only).\r\n *\r\n * @default `auto`\r\n */\r\nexport type ContentType = 'auto' | 'progressive' | 'hls' | 'dash' | 'smoothStreaming';\r\n\r\n/**\r\n * Specifies the audio mode that the player should use. Audio mode is set on per-app basis, if there are multiple players playing and\r\n * have different a `AudioMode` specified, the highest priority mode will be used. Priority order: 'doNotMix' > 'auto' > 'duckOthers' > 'mixWithOthers'.\r\n *\r\n * - `mixWithOthers`: The player will mix its audio output with other apps.\r\n * - `duckOthers`: The player will lower the volume of other apps if any of the active players is outputting audio.\r\n * - `auto`: The player will allow other apps to keep playing audio only when it is muted. On iOS it will always interrupt other apps when `showNowPlayingNotification` is `true` due to system requirements.\r\n * - `doNotMix`: The player will pause playback in other apps, even when it's muted.\r\n *\r\n * > On iOS, the Now Playing notification is dependent on the audio mode. If the audio mode is different from `doNotMix` or `auto` this feature will not work.\r\n */\r\nexport type AudioMixingMode = 'mixWithOthers' | 'duckOthers' | 'auto' | 'doNotMix';\r\n\r\nexport type SubtitleTrack = {\r\n  /**\r\n   * A string used by `expo-video` to identify the subtitle track.\r\n   *\r\n   * @platform android\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Language of the subtitle track. For example, `en`, `pl`, `de`.\r\n   */\r\n  language: string;\r\n\r\n  /**\r\n   * Label of the subtitle track in the language of the device.\r\n   */\r\n  label: string;\r\n};\r\n\r\n/**\r\n * Specifies a VideoTrack loaded from a [`VideoSource`](#videosource).\r\n */\r\nexport type VideoTrack = {\r\n  /**\r\n   * The id of the video track.\r\n   *\r\n   * > This field is platform-specific and may return different depending on the operating system.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Size of the video track.\r\n   */\r\n  size: VideoSize;\r\n\r\n  /**\r\n   * MimeType of the video track or null if unknown.\r\n   */\r\n  mimeType: string | null;\r\n\r\n  /**\r\n   * Indicates whether the video track format is supported by the device.\r\n   *\r\n   * @platform android\r\n   */\r\n  isSupported: boolean;\r\n\r\n  /**\r\n   * Specifies the bitrate in bits per second. This is the peak bitrate if known, or else the average bitrate if known, or else null.\r\n   */\r\n  bitrate: number | null;\r\n\r\n  /**\r\n   * Specifies the frame rate of the video track in frames per second.\r\n   */\r\n  frameRate: number | null;\r\n};\r\n\r\n/**\r\n * Specifies the size of a video track.\r\n */\r\nexport type VideoSize = {\r\n  /**\r\n   * Width of the video track in pixels.\r\n   */\r\n  width: number;\r\n  /**\r\n   * Height of the video track in pixels.\r\n   */\r\n  height: number;\r\n};\r\n\r\nexport type AudioTrack = {\r\n  /**\r\n   * A string used by expo-video to identify the audio track.\r\n   * @platform android\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Language of the audio track. For example, 'en', 'pl', 'de'.\r\n   */\r\n  language: string;\r\n\r\n  /**\r\n   * Label of the audio track in the language of the device.\r\n   */\r\n  label: string;\r\n};\r\n"]}