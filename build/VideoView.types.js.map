{"version":3,"file":"VideoView.types.js","sourceRoot":"","sources":["../src/VideoView.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from \"react-native\";\r\n\r\nimport type { VideoPlayer } from \"./VideoPlayer.types\";\r\n\r\n/**\r\n * Describes how a video should be scaled to fit in a container.\r\n * - `contain`: The video maintains its aspect ratio and fits inside the container, with possible letterboxing/pillarboxing.\r\n * - `cover`: The video maintains its aspect ratio and covers the entire container, potentially cropping some portions.\r\n * - `fill`: The video stretches/squeezes to completely fill the container, potentially causing distortion.\r\n */\r\nexport type VideoContentFit = \"contain\" | \"cover\" | \"fill\";\r\n\r\n/**\r\n * Describes the type of the surface used to render the video.\r\n * - `surfaceView`: Uses the `SurfaceView` to render the video. This value should be used in the majority of cases. Provides significantly lower power consumption, better performance, and more features.\r\n * - `textureView`: Uses the `TextureView` to render the video. Should be used in cases where the SurfaceView is not supported or causes issues (for example, overlapping video views).\r\n *\r\n * You can learn more about surface types in the official [ExoPlayer documentation](https://developer.android.com/media/media3/ui/playerview#surfacetype).\r\n * @platform android\r\n */\r\nexport type SurfaceType = \"textureView\" | \"surfaceView\";\r\n\r\nexport interface VideoViewProps extends ViewProps {\r\n    /**\r\n     * A video player instance. Use [`useVideoPlayer()`](#usevideoplayersource-setup) hook to create one.\r\n     */\r\n    player: VideoPlayer;\r\n\r\n    /**\r\n     * Determines whether native controls should be displayed or not.\r\n     * @default true\r\n     */\r\n    nativeControls?: boolean;\r\n\r\n    /**\r\n     * Describes how the video should be scaled to fit in the container.\r\n     * Options are `'contain'`, `'cover'`, and `'fill'`.\r\n     * @default 'contain'\r\n     */\r\n    contentFit?: VideoContentFit;\r\n\r\n    /**\r\n     * Determines whether fullscreen mode is allowed or not.\r\n     * @default true\r\n     */\r\n    allowsFullscreen?: boolean;\r\n\r\n    /**\r\n     * Determines whether the timecodes should be displayed or not.\r\n     * @default true\r\n     * @platform ios\r\n     */\r\n    showsTimecodes?: boolean;\r\n\r\n    /**\r\n     * Determines whether the player allows the user to skip media content.\r\n     * @default false\r\n     * @platform android\r\n     * @platform ios\r\n     */\r\n    requiresLinearPlayback?: boolean;\r\n\r\n    /**\r\n     * Determines the type of the surface used to render the video.\r\n     * > This prop should not be changed at runtime.\r\n     * @default 'surfaceView'\r\n     * @platform android\r\n     */\r\n    surfaceType?: SurfaceType;\r\n\r\n    /**\r\n     * Determines the position offset of the video inside the container.\r\n     * @default { dx: 0, dy: 0 }\r\n     * @platform ios\r\n     */\r\n    contentPosition?: { dx?: number; dy?: number };\r\n\r\n    /**\r\n     * A callback to call after the video player enters Picture in Picture (PiP) mode.\r\n     * @platform android\r\n     * @platform ios\r\n     * @platform web\r\n     */\r\n    onPictureInPictureStart?: () => void;\r\n\r\n    /**\r\n     * A callback to call after the video player exits Picture in Picture (PiP) mode.\r\n     * @platform android\r\n     * @platform ios\r\n     * @platform web\r\n     */\r\n    onPictureInPictureStop?: () => void;\r\n\r\n    /**\r\n     * Determines whether the player allows Picture in Picture (PiP) mode.\r\n     * > **Note:** The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config)\r\n     * > has to be configured for the PiP to work.\r\n     * @platform android\r\n     * @platform ios\r\n     * @platform web\r\n     */\r\n    allowsPictureInPicture?: boolean;\r\n\r\n    /**\r\n     * Determines whether a video should be played \"inline\", that is, within the element's playback area.\r\n     * @platform web\r\n     */\r\n    playsInline?: boolean;\r\n\r\n    /**\r\n     * Determines whether the player should start Picture in Picture (PiP) automatically when the app is in the background.\r\n     * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\r\n     *\r\n     * > **Note:** The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config)\r\n     * > has to be configured for the PiP to work.\r\n     *\r\n     * @default false\r\n     * @platform android 12+\r\n     * @platform ios\r\n     */\r\n    startsPictureInPictureAutomatically?: boolean;\r\n\r\n    /**\r\n     * Specifies whether to perform video frame analysis (Live Text in videos).\r\n     * Check official [Apple documentation](https://developer.apple.com/documentation/avkit/avplayerviewcontroller/allowsvideoframeanalysis) for more details.\r\n     * @default true\r\n     * @platform ios 16.0+\r\n     */\r\n    allowsVideoFrameAnalysis?: boolean;\r\n\r\n    /**\r\n     * A callback to call after the video player enters fullscreen mode.\r\n     */\r\n    onFullscreenEnter?: () => void;\r\n\r\n    /**\r\n     * A callback to call after the video player exits fullscreen mode.\r\n     */\r\n    onFullscreenExit?: () => void;\r\n\r\n    /**\r\n     * A callback to call after the mounted `VideoPlayer` has rendered the first frame into the `VideoView`.\r\n     * This event can be used to hide any cover images that conceal the initial loading of the player.\r\n     * > **Note:** This event may also be called during playback when the current video track changes (for example when the player switches video quality).\r\n     */\r\n    onFirstFrameRender?: () => void;\r\n\r\n    /**\r\n     * Determines whether the player should use the default ExoPlayer shutter that covers the `VideoView` before the first video frame is rendered.\r\n     * Setting this property to `false` makes the Android behavior the same as iOS.\r\n     *\r\n     * @platform android\r\n     * @default false\r\n     */\r\n    useExoShutter?: boolean;\r\n\r\n    /**\r\n     * Determines the [cross origin policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/crossorigin) used by the underlying native view on web.\r\n     * If undefined, does not use CORS at all.\r\n     *\r\n     * @platform web\r\n     * @default undefined\r\n     */\r\n    crossOrigin?: \"anonymous\" | \"use-credentials\";\r\n    watermarkText?: string;\r\n}\r\n"]}